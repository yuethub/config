#!/bin/bash

# 源代码目录
srcPath=$(pwd)

# 获取工程目录
projectPath=$(cd ../; pwd)

# 设置默认工程名(以工程目录名为默认工程名)
project=$(basename $projectPath)

# 设置默认配置文件名
projectFile="CMakeLists.txt"

# 设置cmake版本号
cmakeVersion=$(cmake --version | grep -E -o '[0-9]{1,2}\.[0-9]{1,2}(\.[0-9]{1,2})?')


# 创建cmake配置文件
createCMakeLists () 
{
    printf "#########################################################################\n" >> $projectFile
    printf "# Automatically generated by tmake $(date)\n" >> $projectFile
    printf "#########################################################################\n" >> $projectFile
    printf "\n" >> $projectFile
    printf "cmake_minimum_required(VERSION 3.2)\n" >> $projectFile
    printf "\n" >> $projectFile
    printf "project($project \n\tVERSION $cmakeVersion \n\tLANGUAGES $langs\n)\n" >> $projectFile
    printf "\n" >> $projectFile
    # for qt applications
    if [ "$mode" = "qt" ]; then
        printf "set(CMAKE AUTOMOC ON)\n" >> $projectFile
        printf "set(CMAKE AUTORCC ON)\n" >> $projectFile
        printf "set(CMAKE AUTOUIC ON)\n" >> $projectFile
        printf "\n">> $projectFile
        printf "find_package(Qt5 COMPONENTS \n">> $projectFile
        printf "\tWidgets\n">> $projectFile
        printf "\tCore\n">> $projectFile
        printf "\tGui\n">> $projectFile
        printf "\tREQUIRED\n">> $projectFile
        printf ")\n">> $projectFile

        printf "\n">> $projectFile
        printf "target_link_libraries($project \n">> $projectFile
        printf "\tQt5::Widgets\n">> $projectFile
        printf "\tQt5::Core\n">> $projectFile
        printf "\tQt5::Gui\n">> $projectFile
        printf ")\n">> $projectFile
    fi

    printf "add_executable($project \n" >> $projectFile
    for file in $sources 
    do
        printf "\t$file \n" >> $projectFile
    done
    printf ")\n" >> $projectFile
}

# 获取源文件及其类型
getLangsAndSrcs() 
{
    for file in $(ls .)
    do
        suffix=$(echo "$file" | cut -d '.' -f 2)
        case "$suffix" in
            c)
                if [ ! -n "$(echo $langs | grep -o '\<C\>')" ];then
                    langs="${langs} C"
                fi
                sources="${sources} $file"
                ;;
            cpp|cc)
                if [ ! -n "$(echo $langs | grep -o '\<CXX\>')" ];then
                    langs="${langs} CXX"
                fi
                sources="${sources} $file"
                ;;
        esac
    done
}

# 命令行参数解析
args=$(getopt -a -o o: -l makefile,project,qt -n 'tmake' -- "$@")
if [ $? != 0 ]; then
    echo "tmake: parse command line error."
    exit 1
fi
eval set -- "$args"
while [ "$1" != "--" ]
do
    case $1 in
        --makefile)
            flagType="makefile"
            ;;
        --project)
            flagType="project"
            ;;
        --qt)
            mode="qt"
            ;;
        -o)
            if [ -n "$2" ]; then
                projectFile=$2
                shift
            fi
            ;;
         *)
             ;;
    esac
    shift
done

# 根据编译类型进行
if [ -z $flagType ] || [ "$flagType" = "makefile" ]; then
    mkdir ../build
    cd ../build
    cmake -G "Unix Makefiles" $srcPath
    cmake --build . --config Release
elif [ "$flagType" = "project" ]; then
    getLangsAndSrcs
    if [ -f $projectFile ]; then
        rm -f $projectFile
    fi
    createCMakeLists
fi

exit
        
